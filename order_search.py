from abc import ABC, abstractmethod
import pandas as pd
import re


class DataLoader(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""

    @abstractmethod
    def load_data(self, filename):
        pass


class ExcelDataLoader(DataLoader):
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel-—Ñ–∞–π–ª–æ–≤"""

    def load_data(self, filename):
        try:
            return pd.read_excel(filename)
        except FileNotFoundError:
            raise ValueError(f"–§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


class OrderProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤"""

    def __init__(self, data_loader: DataLoader):
        self.data_loader = data_loader

    def process_order(self, order_number):
        df = self.data_loader.load_data('–†–ê–°–ö–†–û–ô 2025.xlsx')
        filtered_rows = df[df['‚Ññ –ó–∞–∫–∞–∑–∞'].astype(str) == str(order_number)]

        if filtered_rows.empty:
            return f"–ó–∞–∫–∞–∑ ‚Ññ{order_number} –Ω–µ –Ω–∞–π–¥–µ–Ω."

        first_row = filtered_rows.iloc[0]
        info_extractor = InfoExtractor(first_row)
        extracted_info = info_extractor.extract()
        return extracted_info.format_output()


class InfoExtractor:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∑–∞–ø–∏—Å–µ–π"""

    def __init__(self, row):
        self.row = row

    def extract(self):
        info = {
            'store_application_number': self._extract_store_application(),
            'client': self._extract_client(),
            'full_name': self._extract_full_name(),
            'item_name': self._extract_item_name(),
            'dimensions': self._extract_dimensions(),
            'carcase': self._extract_carcase(),
            'extra_component': self._extract_extra_component(),
            'facade': self._extract_facade(),
            'weight': self._extract_weight(),
        }
        return OrderInfo(**info)

    def _extract_store_application(self):
        return self.row.get('‚Ññ –º–∞–≥–∞–∑–∏–Ω–∞ / –∑–∞—è–≤–∫–∞', '')

    def _extract_client(self):
        return self.row.get('–ö–ª–∏–µ–Ω—Ç', '')

    def _extract_full_name(self):
        return self.row.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '')

    def _extract_item_name(self):
        match = re.match(r'(.*?)(\d+)[x—Ö–•–•*√ó]', self.row.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', ''))
        return match.group(1).strip() if match else ''

    def _extract_dimensions(self):
        dimensions_match = re.search(r'(\d+)\s*[x—Ö–•–•*√ó]\s*(\d+)\s*[x—Ö–•–•*√ó]\s*(\d+)', self.row.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', ''))
        return tuple(map(int, dimensions_match.groups())) if dimensions_match else ()

    def _extract_carcase(self):
        raw_carcase = self.row.get('–ö–æ—Ä–ø—É—Å', '').split('/')
        words = {re.match(r'\D+', p.strip()).group().strip() for p in raw_carcase}
        return '/'.join(words)

    def _extract_extra_component(self):
        component = self.row.get('–ü—Ä–æ—Ñ–∏–ª—å /            –î–æ–ø. –≠–ª–µ–º–µ–Ω—Ç—ã', '')
        return None if component in ['-', ''] else component

    def _extract_facade(self):
        facade = self.row.get('–§–∞—Å–∞–¥', '')
        return None if facade in ['-', ''] else facade

    def _extract_weight(self):
        weight = self.row.get('–í–ï–°, –ö–ì', '')
        return float(weight) if isinstance(weight, (float, int)) else None


class OrderInfo:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""

    def __init__(self, **kwargs):
        self.store_application_number = kwargs.get('store_application_number', '')
        self.client = kwargs.get('client', '')
        self.full_name = kwargs.get('full_name', '')
        self.item_name = kwargs.get('item_name', '')
        self.dimensions = kwargs.get('dimensions', ())
        self.carcase = kwargs.get('carcase', '')
        self.extra_component = kwargs.get('extra_component', None)
        self.facade = kwargs.get('facade', None)
        self.weight = kwargs.get('weight', None)

    def format_output(self):
        output = [
            f"‚úÖ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {self.store_application_number}",
            f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω / –ó–∞—è–≤–∫–∞: {self.client}",
            f"‚úÖ –ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {self.full_name}",
            f"‚úÖ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è: {self.item_name}"
        ]
        if len(self.dimensions) >= 3:
            output.extend([
                f"‚úÖ –®–∏—Ä–∏–Ω–∞: {self.dimensions[0]} –º–º",
                f"‚úÖ –í—ã—Å–æ—Ç–∞: {self.dimensions[1]} –º–º",
                f"‚úÖ –ì–ª—É–±–∏–Ω–∞: {self.dimensions[2]} –º–º"
            ])
        output.append(f"‚úÖ –ö–æ—Ä–ø—É—Å: {self.carcase}")
        output.append(f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {self.extra_component or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
        output.append(f"‚úÖ –§–∞—Å–∞–¥: {self.facade or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
        if self.weight is not None:
            output.append(f"‚úÖ –í–µ—Å: {int(self.weight)} –∫–≥")

        return "\n".join(output)


def main():
    loader = ExcelDataLoader()
    processor = OrderProcessor(loader)
    while True:
        order_number = input("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
        if order_number.lower() == 'q':
            break
        try:
            result = processor.process_order(order_number)
            print(result)
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()